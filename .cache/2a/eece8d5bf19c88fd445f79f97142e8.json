{"id":"index.html","dependencies":[{"name":"_css_loader","parent":"/Users/choibyungnam/Documents/Work/Publish.Study/break-out/src/index.html","resolved":"/Users/choibyungnam/Documents/Work/Publish.Study/break-out/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Users/choibyungnam/Documents/Work/Publish.Study/break-out/.babelrc","includedInParent":true,"mtime":1566456158483},{"name":"/Users/choibyungnam/Documents/Work/Publish.Study/break-out/package.json","includedInParent":true,"mtime":1567747951164}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"ko-KR\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <title>Break Out</title>\n  <style>html, body {\n      margin: 0;\n      padding: 0;\n    }\n    canvas {\n      display: block;\n      margin: 30px auto 0;\n      background-color: #f8f8f8;\n      border: 1px solid #e0e0e0;\n    }\n    .control-group {\n      margin-top: 20px;\n      text-align: center;\n    }</style>\n</head>\n\n<body>\n  <canvas id=\"canvas\" width=\"600px\" height=\"450px\"></canvas>\n\n  <div class=\"control-group\">\n    <button type=\"button\" id=\"btnControl\" data-action=\"start\">START</button>\n    <button type=\"button\" data-action=\"reload\">RELOAD</button>\n  </div>\n\n  <ul>\n    <li><del>공 그리기</del></li>\n    <li><del>공 이동</del></li>\n    <li><del>Paddle 그리기</del></li>\n    <li><del>Paddle 키보드&amp;마우스 이동</del></li>\n    <li><del>벽돌 그리기</del></li>\n    <li><strong><del>벽돌 충돌감지&amp;제거(어려움)</del></strong></li>\n    <li><del>GameOver&amp;Score&amp;Lives</del></li>\n    <li><del>Timer</del></li>\n    <li>공 모션</li>\n  </ul>\n\n  <script>function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar canvas = document.getElementById('canvas');\nvar ctx = canvas.getContext('2d');\n\nvar BreakOut =\n/*#__PURE__*/\nfunction () {\n  function BreakOut() {\n    _classCallCheck(this, BreakOut);\n\n    this.start = false;\n    this.ballRadian = 8;\n    this.x = Math.floor(Math.random() * (canvas.width - this.ballRadian)) + this.ballRadian;\n    this.y = canvas.height - this.ballRadian - 2;\n    this.dx = 6;\n    this.dy = -6;\n    this.paddleWidth = 90;\n    this.paddleHeight = 5;\n    this.paddleLeft = false;\n    this.paddleRight = false;\n    this.paddleX = (canvas.width - this.paddleWidth) / 2;\n    this.paddleCount = 7;\n    this.bricks = [];\n    this.brickWidth = 70;\n    this.brickHeight = 25;\n    this.brickPadding = 10;\n    this.brickOffsetTop = 50;\n    this.brickOffsetLeft = 25;\n    this.brickColCount = 5;\n    this.brickRowCount = 7;\n    this.score = 0;\n    this.lives = 1;\n    this.startTime = Date.now();\n    this.min = 0;\n    this.sec = 0;\n    this.milisec = 0;\n\n    for (var i = 0; i < this.brickRowCount; i++) {\n      this.bricks[i] = [];\n\n      for (var k = 0; k < this.brickColCount; k++) {\n        this.bricks[i][k] = {\n          x: 0,\n          y: 0,\n          status: 1\n        };\n      }\n    }\n  }\n\n  _createClass(BreakOut, [{\n    key: \"keyDownHandler\",\n    value: function keyDownHandler(e) {\n      if (e.which == 37) {\n        breakOut.paddleLeft = true;\n      } else if (e.which == 39) {\n        breakOut.paddleRight = true;\n      } else if (e.which == 107 || e.which == 43) {\n        if (breakOut.paddleWidth < canvas.width) breakOut.paddleWidth += 100; // console.log(breakOut.paddleWidth);\n      }\n    }\n  }, {\n    key: \"keyUpHandler\",\n    value: function keyUpHandler(e) {\n      if (e.which == 37) {\n        breakOut.paddleLeft = false;\n      } else if (e.which == 39) {\n        breakOut.paddleRight = false;\n      }\n    }\n  }, {\n    key: \"drawIntro\",\n    value: function drawIntro(ctx) {\n      window.cancelAnimationFrame(breakOut.anim);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.font = '50px malgun gothic';\n      ctx.textAlign = 'center';\n      ctx.fillStyle = '#000';\n      ctx.fillText('Break Out', canvas.width / 2, canvas.height / 2 - 20);\n      ctx.font = '25px malgun gothic';\n      ctx.fillText('아래 [START] 버튼을 클릭해주세요!', canvas.width / 2, canvas.height / 2 + 20);\n    }\n  }, {\n    key: \"drawBricks\",\n    value: function drawBricks() {\n      for (var i = 0; i < breakOut.brickRowCount; i++) {\n        for (var k = 0; k < breakOut.brickColCount; k++) {\n          if (breakOut.bricks[i][k].status === 1) {\n            // status 가 1일 경우에만 벽돌 그리기\n            var brickX = i * (breakOut.brickWidth + breakOut.brickPadding) + breakOut.brickOffsetLeft;\n            var brickY = k * (breakOut.brickHeight + breakOut.brickPadding) + breakOut.brickOffsetTop;\n            breakOut.bricks[i][k].x = brickX;\n            breakOut.bricks[i][k].y = brickY;\n            ctx.beginPath();\n            ctx.rect(brickX, brickY, breakOut.brickWidth, breakOut.brickHeight);\n            ctx.fillStyle = '#e0e0e0';\n            ctx.fill();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"drawBall\",\n    value: function drawBall(ctx) {\n      ctx.beginPath();\n      ctx.fillStyle = '#9c9c9c';\n      ctx.arc(breakOut.x, breakOut.y, breakOut.ballRadian, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  }, {\n    key: \"drawPaddle\",\n    value: function drawPaddle() {\n      ctx.beginPath();\n      ctx.fillStyle = '#c5c5c5';\n      ctx.fillRect(breakOut.paddleX, canvas.height - breakOut.paddleHeight, breakOut.paddleWidth, breakOut.paddleHeight);\n      ctx.fill();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // breakOut.gameStart();\n\n      breakOut.drawBall(ctx);\n      breakOut.drawPaddle(ctx);\n      breakOut.drawBricks(ctx);\n      breakOut.drawScore();\n      breakOut.drawLives();\n      breakOut.drawEnd();\n      breakOut.timer = setTimeout(function () {\n        var nowTime = new Date(Date.now() - breakOut.startTime);\n        breakOut.min = breakOut.timeAddZero(nowTime.getMinutes());\n        breakOut.sec = breakOut.timeAddZero(nowTime.getSeconds());\n        breakOut.milisec = breakOut.timeAddZero(Math.floor(nowTime.getMilliseconds() / 10)); // console.log(breakOut.min, breakOut.sec, breakOut.milisec);\n      });\n      /*\n        충동감지 어렵다.\n        공의 x 좌표는 벽돌의 x 좌표보다 커야 한다.\n        공의 x 좌표는 벽돌의 x 좌표 + 가로 길이보다 작아야 한다.\n        공의 y 좌표는 벽돌의 y 좌표보다 커야 한다.\n        공의 y 좌표는 벽돌의 y 좌표 + 높이보다 작아야 한다.\n      */\n\n      for (var i = 0; i < breakOut.brickRowCount; i++) {\n        for (var k = 0; k < breakOut.brickColCount; k++) {\n          var brickCurrent = breakOut.bricks[i][k];\n\n          if (brickCurrent.status === 1) {\n            if (breakOut.x > brickCurrent.x - breakOut.ballRadian && breakOut.x < brickCurrent.x + breakOut.brickWidth + breakOut.ballRadian && breakOut.y > brickCurrent.y - breakOut.ballRadian && breakOut.y < brickCurrent.y + breakOut.brickHeight + breakOut.ballRadian) {\n              breakOut.dy = -breakOut.dy;\n              brickCurrent.status = 0;\n              breakOut.score += 100; // console.log('brickCurrntX,Y:', brickCurrent.x, brickCurrent.y, breakOut.score);\n\n              if (breakOut.score === breakOut.brickColCount * breakOut.brickRowCount * 100) {\n                breakOut.start = true;\n                clearTimeout(breakOut.timer);\n                window.cancelAnimationFrame(breakOut.anim);\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                ctx.font = '45px malgun gothic';\n                ctx.textAlign = 'center';\n                ctx.fillStyle = '#000';\n                ctx.fillText('Final Time!', canvas.width / 2, canvas.height / 2 - 20);\n                ctx.font = '25px malgun gothic';\n                ctx.fillText(\"\".concat(breakOut.min, \":\").concat(breakOut.sec, \":\").concat(breakOut.milisec), canvas.width / 2, canvas.height / 2 + 20);\n                breakOut.gameStart();\n                return false;\n              }\n            }\n          }\n        }\n      }\n\n      if (breakOut.x > canvas.width - breakOut.ballRadian || breakOut.x < breakOut.ballRadian) {\n        // Ball 좌우\n        breakOut.dx = -breakOut.dx; // console.log('X 충돌!');\n      }\n\n      if (breakOut.y < breakOut.ballRadian) {\n        // Ball 상하\n        breakOut.dy = -breakOut.dy; // console.log('Y 충돌!');\n      } else if (breakOut.y > canvas.height - breakOut.paddleHeight) {\n        // console.log('paddle&ball 좌표:', breakOut.x, breakOut.paddleX + breakOut.paddleWidth);\n        if (breakOut.x > breakOut.paddleX && breakOut.x < breakOut.paddleX + breakOut.paddleWidth) {\n          // console.log('야호!');\n          breakOut.dy = -breakOut.dy;\n        } else {\n          breakOut.lives--;\n\n          if (!breakOut.lives) {\n            // console.log('GAME OVER!');\n            breakOut.gameOver();\n            return false;\n          } else {\n            breakOut.x = canvas.width / 2;\n            breakOut.y = canvas.height - breakOut.ballRadian;\n            breakOut.dx = 6;\n            breakOut.dy = -6;\n            breakOut.paddleX = (canvas.width - breakOut.paddleWidth) / 2;\n          }\n        }\n      }\n\n      if (breakOut.paddleRight) {\n        // Paddle Keyboard\n        breakOut.paddleX += breakOut.paddleCount;\n\n        if (breakOut.paddleX > canvas.width - breakOut.paddleWidth) {\n          // console.log(canvas.width - breakOut.paddleWidth);\n          breakOut.paddleX = canvas.width - breakOut.paddleWidth;\n        }\n      } else if (breakOut.paddleLeft) {\n        breakOut.paddleX -= breakOut.paddleCount;\n\n        if (breakOut.paddleX < 0) {\n          breakOut.paddleX = 0;\n        }\n      }\n\n      breakOut.x += breakOut.dx;\n      breakOut.y += breakOut.dy; // console.log(breakOut.x, breakOut.y);\n\n      breakOut.anim = window.requestAnimationFrame(breakOut.draw);\n    }\n  }, {\n    key: \"mouseMoveHandler\",\n    value: function mouseMoveHandler(e) {\n      var relativeX = e.clientX - canvas.offsetLeft;\n\n      if (relativeX >= 0 && relativeX <= canvas.width) {\n        breakOut.paddleX = relativeX - breakOut.paddleWidth / 2; // 마우스 커서가 캔버스 좌우 넘어갔을 경우 제어\n        // if (relativeX < breakOut.paddleWidth / 2) {\n        //   breakOut.paddleX = 0;\n        // } else if (relativeX > canvas.width - breakOut.paddleWidth / 2) {\n        //   breakOut.paddleX = canvas.width - breakOut.paddleWidth;\n        // }\n      }\n    }\n  }, {\n    key: \"drawScore\",\n    value: function drawScore() {\n      ctx.font = '20px malgun gothic';\n      ctx.textAlign = 'left';\n      ctx.fillStyle = '#000';\n      ctx.fillText(\"Score : \".concat(breakOut.score), breakOut.brickOffsetLeft, 30);\n    }\n  }, {\n    key: \"drawLives\",\n    value: function drawLives() {\n      ctx.font = '20px malgun gothic';\n      ctx.textAlign = 'right';\n      ctx.fillStyle = '#000';\n      ctx.fillText(\"Lives : \".concat(breakOut.lives), canvas.width - breakOut.brickOffsetLeft, 30);\n    }\n  }, {\n    key: \"drawEnd\",\n    value: function drawEnd() {\n      ctx.font = '20px malgun gothic';\n      ctx.textAlign = 'center';\n      ctx.fillStyle = '#000';\n      ctx.fillText(\"Time : \".concat(breakOut.min, \":\").concat(breakOut.sec, \":\").concat(breakOut.milisec), canvas.width / 2, 30);\n    }\n  }, {\n    key: \"timeAddZero\",\n    value: function timeAddZero(num) {\n      return num < 10 ? '0' + num : '' + num;\n    }\n  }, {\n    key: \"gameStart\",\n    value: function gameStart() {\n      if (!breakOut.start) {\n        breakOut.start = false;\n        window.cancelAnimationFrame(breakOut.anim);\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        breakOut = new BreakOut();\n        breakOut.draw(ctx);\n      }\n    }\n  }, {\n    key: \"gameOver\",\n    value: function gameOver() {\n      breakOut.start = true;\n      window.cancelAnimationFrame(breakOut.anim);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.font = '50px malgun gothic';\n      ctx.textAlign = 'center';\n      ctx.fillStyle = '#000';\n      ctx.fillText('실력이 부족하구만~', canvas.width / 2, canvas.height / 2);\n      breakOut.gameStart();\n    }\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      document.location.reload();\n    }\n  }]);\n\n  return BreakOut;\n}();\n\nvar breakOut = new BreakOut();\nbreakOut.drawIntro(ctx);\ndocument.addEventListener('keydown', breakOut.keyDownHandler, false);\ndocument.addEventListener('keyup', breakOut.keyUpHandler, false);\ndocument.addEventListener('mousemove', breakOut.mouseMoveHandler, false);\ndocument.addEventListener('click', function (e) {\n  var target = e.target;\n  var actionName = !!target.dataset && target.dataset.action;\n\n  if (actionName === 'reload') {\n    breakOut.reload();\n  } else if (actionName === 'start') {\n    breakOut.start = false;\n    breakOut.gameStart();\n  }\n});</script>\n</body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"1c7fb59163efe368c813dbf459880799","cacheData":{"env":{}}}